server {
	listen 81;

	# @see https://mijndertstuij.nl/writing/posts/using-acme.sh-to-issue-lets-encrypt-certificates/
	# acme.sh --register-account
	# ACCOUNT_THUMBPRINT='uhk11jJTKBGrlGYeZXzN-JX86L64GDi5-e8e3_B5duM'
	# ACCOUNT_THUMBPRINT='H-QveBwHzT6RdoBTIxlQxitU4feF1HnHxSCL332KzhI'
	location ~ "^/\.well-known/acme-challenge/([-_a-zA-Z0-9]+)$" {
		default_type text/plain;
		return 200 "$1.H-QveBwHzT6RdoBTIxlQxitU4feF1HnHxSCL332KzhI";
	}

	location / {
		return 301 https://$host$request_uri;
	}
}

# https://github.com/macbre/docker-nginx-brotli#quic--http3-support
server {
	# quic and http/3
	listen 443 http3 reuseport;

        listen 443 ssl http2;
        server_name wbc.macbre.net localhost;

        server_tokens off; # disables emitting nginx version in error messages and in the “Server” response header field

        # caching
        proxy_cache wbc;
        add_header X-Cache $upstream_cache_status;

	# run to renew
	# acme.sh --issue -d wbc.macbre.net  --stateless --force
	ssl_certificate     /etc/nginx/cert/fullchain.cer;
	ssl_certificate_key /etc/nginx/cert/wbc.macbre.net.key;

	# Enable all TLS versions (TLSv1.3 is required for QUIC).
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;

	# 0-RTT QUIC connection resumption
	ssl_early_data on;

	# Add Alt-Svc header to negotiate HTTP/3.
	add_header alt-svc 'h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400';

	# Sent when QUIC was used
	add_header QUIC-Status $quic;

        location / {
                # pass the request to flask app
                proxy_pass http://app:8080;

                # Set some HTTP headers so that our app knows where the
                # request really came from
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
}
